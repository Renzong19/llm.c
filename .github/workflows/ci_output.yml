name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - master
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-test-cpu:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenMP
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y libomp-dev
          elif [ "${{ runner.os }}" == "macOS" ]; then
            brew install libomp
          fi

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run preprocessing
        run: python dev/data/tinyshakespeare.py

      - name: Train model
        run: python train_gpt2.py --device=cpu

      # Windows-specific steps remain the same...
      - name: Download Win32 Make.exe
        if: matrix.os == 'windows-latest'
        run: |
            $wc = New-Object System.Net.WebClient
            $url = 'https://github.com/maweil/MakeForWindows/releases/download/v4.4.1/make-bin-win64.zip'
            $output = './make-bin-win64.zip'
            $wc.DownloadFile($url, $output)

      - name: Unzip Win32 Makefile
        if: matrix.os == 'windows-latest'
        run: |
          unzip make-bin-win64.zip

      # Compilation steps
      - name: Compile for Unix-like systems
        if: matrix.os != 'windows-latest'
        run: make test_gpt2 train_gpt2

      - name: Compile for Windows
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          call "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
          make-4.4.1\dist\make WIN_CI_BUILD=1 test_gpt2 train_gpt2

      # Create artifacts for each platform
      - name: Create release artifacts
        run: |
          mkdir -p release
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp test_gpt2.exe release/test_gpt2-windows.exe
            cp train_gpt2.exe release/train_gpt2-windows.exe
          else
            cp test_gpt2 release/test_gpt2-${{ runner.os }}
            cp train_gpt2 release/train_gpt2-${{ runner.os }}
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: llm-c-${{ runner.os }}
          path: release/*

  build-cuda:
    runs-on: ubuntu-latest
    container:
      image: nvidia/cuda:12.4.1-devel-ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build CUDA variants
        run: |
          mkdir -p release
          # Build FP32
          make train_gpt2fp32cu test_gpt2fp32cu
          cp train_gpt2fp32cu release/
          cp test_gpt2fp32cu release/
          
          # Build BF16
          PRECISION=BF16 make test_gpt2cu train_gpt2cu
          cp test_gpt2cu release/test_gpt2cu-bf16
          cp train_gpt2cu release/train_gpt2cu-bf16
          
          # Build FP16
          PRECISION=FP16 make test_gpt2cu train_gpt2cu
          cp test_gpt2cu release/test_gpt2cu-fp16
          cp train_gpt2cu release/train_gpt2cu-fp16

      - name: Upload CUDA artifacts
        uses: actions/upload-artifact@v3
        with:
          name: llm-c-cuda
          path: release/*

  create-release:
    needs: [build-and-test-cpu, build-cuda]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            llm-c-Linux/*
            llm-c-Windows/*
            llm-c-macOS/*
            llm-c-cuda/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
